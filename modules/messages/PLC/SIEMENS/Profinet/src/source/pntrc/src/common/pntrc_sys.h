#ifndef PNTRC_SYS_H
#define PNTRC_SYS_H

#ifdef __cplusplus                       /* If C++ - compiler: Use C linkage */
extern "C"
{
#endif

/*****************************************************************************/
/*  Copyright (C) 2015 Siemens Aktiengesellschaft. All rights reserved.      */
/*****************************************************************************/
/*  This program is protected by German copyright law and international      */
/*  treaties. The use of this software including but not limited to its      */
/*  Source Code is subject to restrictions as agreed in the license          */
/*  agreement between you and Siemens.                                       */
/*  Copying or distribution is not allowed unless expressly permitted        */
/*  according to your license agreement with Siemens.                        */
/*****************************************************************************/
/*                                                                           */
/*  P r o j e c t         &P: PROFINET IO Runtime Software              :P&  */
/*                                                                           */
/*  P a c k a g e         &W: PROFINET IO Runtime Software              :W&  */
/*                                                                           */
/*  C o m p o n e n t     &C: PNTRC (PN Trace)                          :C&  */
/*                                                                           */
/*  F i l e               &F: pntrc_sys.h                               :F&  */
/*                                                                           */
/*  V e r s i o n         &V: BC_PNRUN_P05.04.00.00_00.02.00.40         :V&  */
/*                                                                           */
/*  D a t e  (YYYY-MM-DD) &D: 2015-07-28                                :D&  */
/*                                                                           */
/*****************************************************************************/
/*                                                                           */
/*  D e s c r i p t i o n :                                                  */
/*                                                                           */
/*  System interface                                                         */
/*                                                                           */
/*****************************************************************************/


/*===========================================================================*/
/*                       constants for detail-pointer                        */
/*===========================================================================*/

/* System ID definition App == Bit0, LD == Bit 1, HD == Bit 2 - Bit 6 */

#define PNTRC_SYSTEM_ID_APP     1
#define PNTRC_SYSTEM_ID_LD      2
#define PNTRC_SYSTEM_ID_HD_1    4
#define PNTRC_SYSTEM_ID_HD_2    8
#define PNTRC_SYSTEM_ID_HD_3   16
#define PNTRC_SYSTEM_ID_HD_4   32

#define PNTRC_CATEGORY_THREAD   1
#define PNTRC_CATEGORY_ISR      2

/*===========================================================================*/
/*                                  types                                    */
/*===========================================================================*/

#define PNTRC_MEM_PTR_TYPE                  /* pointer to memory */          \
    LSA_VOID *

#define PNTRC_FATAL_ERROR_PTR_TYPE          /* pointer to LSA_FATAL_ERROR */ \
    struct lsa_fatal_error_tag  *

/*------------------------------------------------------------------------------
// pntrc cpu handle
//----------------------------------------------------------------------------*/

//Cpu handle, stores PNTRC internal infos. This handle is generated by PNTRC and returned to the user. The user uses this handle, when he calls PNTRC functions.
typedef struct dummy_pntrc_cpu_handle_type {
	LSA_UINT8 index;
	LSA_BOOL Opened;
	LSA_BOOL InUse;
	LSA_BOOL SetLogLevelPending;
	LSA_BOOL SyncTimeSent;
	LSA_BOOL InitLogLevelsSent;
	PNTRC_SYS_HANDLE_LOWER_PTR_TYPE SysHandle;
	LSA_BOOL FatalHandled;
} PNTRC_CPU_HANDLE_TYPE;
typedef PNTRC_CPU_HANDLE_TYPE* PNTRC_CPU_HANDLE_PTR_TYPE;

typedef LSA_UINT32 PNTRC_BUFFER_ID_TYPE;

/*------------------------------------------------------------------------------
// pntrc_buffer_init_tag
//----------------------------------------------------------------------------*/

typedef struct pntrc_buffer_init_tag
{
	PNTRC_CATEGORY_TYPE       Category;
	LSA_UINT8*                 pBase;
	LSA_UINT32                uSize;
} PNTRC_BUFFER_INIT_TYPE;

typedef struct pntrc_buffer_init_tag * PNTRC_BUFFER_INIT_PTR_TYPE;

/*------------------------------------------------------------------------------
// pntrc_init_tag
//----------------------------------------------------------------------------*/


typedef struct pntrc_init_tag
{
	PNTRC_SYS_HANDLE_TYPE hSysDev;
	LSA_UINT8 *Ptr;
	LSA_UINT32 Size;
	LSA_BOOL bIsTopMostCPU;
	LSA_BOOL bUseLocalBinaryTrace;
	LSA_BOOL bUseInitLogLevels;
	LSA_UINT8* pInitLogLevels;
	PNTRC_CB_BUFFER_FULL pCBBufferFull;
} PNTRC_INIT_TYPE;
typedef PNTRC_INIT_TYPE* PNTRC_INIT_PTR_TYPE;

/*===========================================================================*/
/*                                 macros                                    */
/*===========================================================================*/


/*===========================================================================*/
/*                                prototyping                                */
/*===========================================================================*/

/*====  in functions  =====*/

/*=============================================================================
 * function name:  pntrc_init
 *
 * function:       initialize pntrc
 *
 * parameters:     None
 *
 * return value:   LSA_UINT16:  LSA_RET_OK
 *                              possibly:
 *                              LSA_RET_ERR_PARAM
 *                              LSA_RET_ERR_RESOURCE
 *                              or others
 *===========================================================================*/
LSA_UINT16 pntrc_init(PNTRC_INIT_PTR_TYPE pInit);

/*=============================================================================
 * function name:  pntrc_undo_init
 *
 * function:       undo the initialization of pntrc
 *
 * parameters:     LSA_VOID
 *
 * return value:   LSA_UINT16:  LSA_RET_OK
 *                              possibly:
 *                              LSA_RET_ERR_SEQUENCE
 *                              or others
 *===========================================================================*/
LSA_UINT16  pntrc_undo_init(
    LSA_VOID
);

LSA_VOID PNTRC_INIT_TRACE_TIMER(PNTRC_INIT_TRACE_TIMER_PTR_TYPE pInit);

LSA_VOID pntrc_buffer_full_done(LSA_VOID* SysHandle, PNTRC_BUFFER_ID_TYPE BufferID);

PNTRC_CPU_HANDLE_PTR_TYPE pntrc_open_lower_cpu(PNTRC_SYS_HANDLE_LOWER_PTR_TYPE SysHandle);
LSA_VOID pntrc_close_lower_cpu(PNTRC_CPU_HANDLE_PTR_TYPE PntrcHandle);

LSA_UINT16 pntrc_service(LSA_VOID);

LSA_UINT16 pntrc_fatal_occurred(void);

LSA_UINT16 PNTRC_READ_LOWER_CPU(PNTRC_SYS_HANDLE_LOWER_PTR_TYPE hLowerDev, LSA_UINT32 Offset, LSA_UINT32 Size, LSA_UINT8* Ptr);
LSA_UINT16 PNTRC_WRITE_LOWER_CPU(PNTRC_SYS_HANDLE_LOWER_PTR_TYPE hLowerDev, LSA_UINT8* Ptr, LSA_UINT32 Offset, LSA_UINT32 Size);

LSA_VOID pntrc_request(PNTRC_RQB_PTR_TYPE rqb);

LSA_VOID pntrc_set_ready(LSA_VOID);

LSA_UINT8 PNTRC_GET_CATEGORY(PNTRC_SYS_HANDLE_TYPE hSysDev);

LSA_UINT16 PNTRC_BUFFER_FULL(LSA_VOID* SysHandle, PNTRC_BUFFER_ID_TYPE BufferID, LSA_UINT8* pBuffer, LSA_UINT32 Size);

LSA_VOID PNTRC_GET_TRACESTAMP(LSA_UINT32* pntrc_tracestamp_lo, LSA_UINT32* pntrc_tracestamp_hi);
LSA_VOID PNTRC_WRITE_SYNC_TIME(LSA_UINT32 pntrc_tracestamp_lo, LSA_UINT32 pntrc_tracestamp_hi);

LSA_VOID pntrc_force_buffer_switch(LSA_VOID);

LSA_RESPONSE_TYPE pntrc_set_log_levels_from_components(LSA_UINT8* pLogLevels, LSA_UINT8* pCompLevels, LSA_UINT16 CompCount);

/*====  out functions  =====*/

/*=============================================================================
 * function name:  PNTRC_OFFSET_OF
 *
 * function:       offset of a member in a structure
 *
 * parameters:     s ... struct
				   m ... member
 *
 * return value:   LSA_UINT32
 *===========================================================================*/
#ifndef PNTRC_OFFSET_OF
# error "PNTRC_OFFSET_OF not defined"
#endif

/*=============================================================================
 * function name:  PNTRC_ALLOC_LOCAL_MEM
 *
 * function:       allocate a local-memory
 *
 * parameters:     PNTRC_MEM_PTR_TYPE  ...  *  local_mem_ptr_ptr:
 *                                   return value: pointer to local-memory-
 *                                                 pointer
 *                                                 or LSA_NULL: No memory
 *                                                 available
 *                 LSA_UINT32                         length: length of memory
 *
 * return value:   LSA_VOID
 *===========================================================================*/
#ifndef PNTRC_ALLOC_LOCAL_MEM
LSA_VOID  PNTRC_ALLOC_LOCAL_MEM(
    PNTRC_MEM_PTR_TYPE  *  local_mem_ptr_ptr,
    LSA_UINT32                length
);
#endif

/*=============================================================================
 * function name:  PNTRC_FREE_LOCAL_MEM
 *
 * function:       free a local-memory
 *
 * parameters:     LSA_UINT16         ...  *  ret_val_ptr:
 *                     return value: LSA_RET_OK         ok
 *                                   LSA_RET_ERR_PARAM  no deallocation because
 *                                                      of wrong pointer to
 *                                                      local-memory
 *                 PNTRC_MEM_PTR_TYPE  local_mem_ptr:  pointer to local-
 *                                                            memory
 *
 * return value:   LSA_VOID
 *===========================================================================*/
#ifndef PNTRC_FREE_LOCAL_MEM
LSA_VOID  PNTRC_FREE_LOCAL_MEM(
    LSA_UINT16                 *  ret_val_ptr,
    PNTRC_MEM_PTR_TYPE   local_mem_ptr
);
#endif

/*=============================================================================
 * function name:  PNTRC_GET_TRACESTAMP
 *
 * function:       read current tracestamp
 *
 * parameters:     LSA_UINT32  LTRC_LOCAL_MEM_ATTR *  ltrc_tracestamp_hi
 *                 LSA_UINT32  LTRC_LOCAL_MEM_ATTR *  ltrc_tracestamp_lo
 *
 * return value:   LSA_VOID
 *===========================================================================*/
#ifndef PNTRC_GET_TRACESTAMP
LSA_EXTERN
LSA_VOID PNTRC_GET_TRACESTAMP(
    LSA_UINT32*  ltrc_tracestamp_hi,
    LSA_UINT32*  ltrc_tracestamp_lo
);
#endif


/*=============================================================================
 * function name:  PNTRC_ALLOC_CRITICAL_SECTION
 *
 * function:       alloc reentrance lock
 *
 * parameters:     LSA_VOID
 *
 * return value:   LSA_VOID
 *===========================================================================*/
#ifndef PNTRC_ALLOC_CRITICAL_SECTION
LSA_VOID  PNTRC_ALLOC_CRITICAL_SECTION(
    LSA_VOID
);
#endif

/*=============================================================================
 * function name:  PNTRC_FREE_CRITICAL_SECTION
 *
 * function:       free reentrance lock
 *
 * parameters:     LSA_VOID
 *
 * return value:   LSA_VOID
 *===========================================================================*/
#ifndef PNTRC_FREE_CRITICAL_SECTION
LSA_VOID  PNTRC_FREE_CRITICAL_SECTION(
    LSA_VOID
);
#endif

/*=============================================================================
 * function name:  PNTRC_ENTER
 *
 * function:       set reentrance lock
 *
 * parameters:     LSA_VOID
 *
 * return value:   LSA_VOID
 *===========================================================================*/
#ifndef PNTRC_ENTER_TRACE
LSA_UINT32 PNTRC_ENTER_TRACE(
    LSA_UINT8 Category
);
#endif

/*=============================================================================
 * function name:  PNTRC_EXIT
 *
 * function:       cancel reentrance lock
 *
 * parameters:     LSA_VOID
 *
 * return value:   LSA_VOID
 *===========================================================================*/
#ifndef PNTRC_EXIT_TRACE
LSA_VOID  PNTRC_EXIT_TRACE(
    LSA_UINT8 Category
);
#endif

#ifndef PNTRC_ENTER_SERVICE
LSA_UINT32 PNTRC_ENTER_SERVICE(
    LSA_VOID
);
#endif

#ifndef PNTRC_EXIT_SERVICE
LSA_VOID  PNTRC_EXIT_SERVICE(
    LSA_VOID
);
#endif

/*=============================================================================
 * function name:  PNTRC_FATAL_ERROR
 *
 * function:       notify a fatal-error
 *
 * parameters:     LSA_UINT16                length:     number of bytes
 *                 PNTRC_FATAL_ERROR_PTR_TYPE  error_ptr:  pointer to
 *                                                       LSA_FATAL_ERROR
 *
 * return value:   LSA_VOID
 *===========================================================================*/
#ifndef PNTRC_FATAL_ERROR
LSA_VOID  PNTRC_FATAL_ERROR(
    LSA_UINT16                   length,
    PNTRC_FATAL_ERROR_PTR_TYPE   error_ptr
);
#endif




/*===========================================================================*/
/* non-LSA-predefined             prototyping                                */
/*===========================================================================*/


/*=============================================================================
 * function name:  pntrc_fatal_error
 *
 * function:       helper to fills
 *                    LSA_FATAL_ERROR_TYPE  pntrc_glob_fatal_error
 *                 and then calls PNTRC_FATAL_ERROR
 *
 *===========================================================================*/

LSA_VOID
pntrc_fatal_error (
	LSA_UINT16  module_id,
	LSA_UINT16  line,
	LSA_UINT32	eror_code_0,
	LSA_UINT32	eror_code_1,
	LSA_UINT32	eror_code_2,
	LSA_UINT32	eror_code_3,
	LSA_UINT16  error_data_len,
	LSA_VOID_PTR_TYPE  error_data
	);

/*=============================================================================
 * function name:  PNTRC_MEMCPY_LOCAL_MEM
 *
 * function:       copy a local memory block
 *
 * parameters:     PNTRC_MEM_PTR_TYPE  src:  src pointer
 *                 PNTRC_MEM_PTR_TYPE  dest:  dest pointer
 *                 LSA_UINT  count:  number of bytes to transfer
 *
 * return value:   LSA_VOID
 *===========================================================================*/
#ifndef PNTRC_MEMCPY_LOCAL_MEM
LSA_VOID  PNTRC_MEMCPY_LOCAL_MEM(
    PNTRC_MEM_PTR_TYPE   dest,
    PNTRC_MEM_PTR_TYPE   src,
	LSA_UINT count
);
#endif

/*=============================================================================
 * function name:  PNTRC_MEMSET_LOCAL_MEM
 *
 * function:       fill a local memory block
 *
 * parameters:     PNTRC_MEM_PTR_TYPE  dest:  dest pointer
 *                 LSA_UINT val:  byte to fill with
 *                 LSA_UINT  count:  number of bytes to fill
 *
 * return value:   LSA_VOID
 *===========================================================================*/
#ifndef PNTRC_MEMSET_LOCAL_MEM
LSA_VOID PNTRC_MEMSET_LOCAL_MEM (
	PNTRC_MEM_PTR_TYPE   dest,
	LSA_UINT val,
	LSA_UINT count
);
#endif

#ifndef PNTRC_STRLEN
LSA_UINT PNTRC_STRLEN(
	PNTRC_MEM_PTR_TYPE str
);
#endif

/*=============================================================================
 * function name:  PNTRC_PUT 32 and PNTRC_GET 32
 *
 * function:       macros for memory access without alignment requirements
 *
 * important:      WE WILL IMPLEMENT variants for mem-attribs
 *                 when needed. All known platforms are "flat".
 *
 *===========================================================================*/

#ifndef PNTRC_SHMTOL_L
LSA_UINT32 PNTRC_SHMTOL_L(
	LSA_UINT32  shm_long );
#endif

#ifndef PNTRC_LTOSHM_L
LSA_UINT32 PNTRC_LTOSHM_L(
	LSA_UINT32  local_long );
#endif


/*----------------------------------------------------------------------------*/

#ifndef PNTRC_TRACE_OUT_00
LSA_BOOL PNTRC_TRACE_OUT_00 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef
   );
#endif

#ifndef PNTRC_TRACE_OUT_01
LSA_BOOL PNTRC_TRACE_OUT_01 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1
   );
#endif

#ifndef PNTRC_TRACE_OUT_02
LSA_BOOL PNTRC_TRACE_OUT_02 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1,
   LSA_UINT32             a2
   );
#endif

#ifndef PNTRC_TRACE_OUT_03
LSA_BOOL PNTRC_TRACE_OUT_03 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1,
   LSA_UINT32             a2,
   LSA_UINT32             a3
   );
#endif

#ifndef PNTRC_TRACE_OUT_04
LSA_BOOL PNTRC_TRACE_OUT_04 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1,
   LSA_UINT32             a2,
   LSA_UINT32             a3,
   LSA_UINT32             a4
   );
#endif

#ifndef PNTRC_TRACE_OUT_05
LSA_BOOL PNTRC_TRACE_OUT_05 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1,
   LSA_UINT32             a2,
   LSA_UINT32             a3,
   LSA_UINT32             a4,
   LSA_UINT32             a5
   );
#endif

#ifndef PNTRC_TRACE_OUT_06
LSA_BOOL PNTRC_TRACE_OUT_06 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1,
   LSA_UINT32             a2,
   LSA_UINT32             a3,
   LSA_UINT32             a4,
   LSA_UINT32             a5,
   LSA_UINT32             a6
   );
#endif

#ifndef PNTRC_TRACE_OUT_07
LSA_BOOL PNTRC_TRACE_OUT_07 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1,
   LSA_UINT32             a2,
   LSA_UINT32             a3,
   LSA_UINT32             a4,
   LSA_UINT32             a5,
   LSA_UINT32             a6,
   LSA_UINT32             a7
   );
#endif

#ifndef PNTRC_TRACE_OUT_08
LSA_BOOL PNTRC_TRACE_OUT_08 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1,
   LSA_UINT32             a2,
   LSA_UINT32             a3,
   LSA_UINT32             a4,
   LSA_UINT32             a5,
   LSA_UINT32             a6,
   LSA_UINT32             a7,
   LSA_UINT32             a8
   );
#endif

#ifndef PNTRC_TRACE_OUT_09
LSA_BOOL PNTRC_TRACE_OUT_09 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1,
   LSA_UINT32             a2,
   LSA_UINT32             a3,
   LSA_UINT32             a4,
   LSA_UINT32             a5,
   LSA_UINT32             a6,
   LSA_UINT32             a7,
   LSA_UINT32             a8,
   LSA_UINT32             a9
   );
#endif

#ifndef PNTRC_TRACE_OUT_10
LSA_BOOL PNTRC_TRACE_OUT_10 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1,
   LSA_UINT32             a2,
   LSA_UINT32             a3,
   LSA_UINT32             a4,
   LSA_UINT32             a5,
   LSA_UINT32             a6,
   LSA_UINT32             a7,
   LSA_UINT32             a8,
   LSA_UINT32             a9,
   LSA_UINT32             a10
   );
#endif

#ifndef PNTRC_TRACE_OUT_11
LSA_BOOL PNTRC_TRACE_OUT_11 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1,
   LSA_UINT32             a2,
   LSA_UINT32             a3,
   LSA_UINT32             a4,
   LSA_UINT32             a5,
   LSA_UINT32             a6,
   LSA_UINT32             a7,
   LSA_UINT32             a8,
   LSA_UINT32             a9,
   LSA_UINT32             a10,
   LSA_UINT32             a11
   );
#endif

#ifndef PNTRC_TRACE_OUT_12
LSA_BOOL PNTRC_TRACE_OUT_12 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1,
   LSA_UINT32             a2,
   LSA_UINT32             a3,
   LSA_UINT32             a4,
   LSA_UINT32             a5,
   LSA_UINT32             a6,
   LSA_UINT32             a7,
   LSA_UINT32             a8,
   LSA_UINT32             a9,
   LSA_UINT32             a10,
   LSA_UINT32             a11,
   LSA_UINT32             a12
   );
#endif

#ifndef PNTRC_TRACE_OUT_13
LSA_BOOL PNTRC_TRACE_OUT_13 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1,
   LSA_UINT32             a2,
   LSA_UINT32             a3,
   LSA_UINT32             a4,
   LSA_UINT32             a5,
   LSA_UINT32             a6,
   LSA_UINT32             a7,
   LSA_UINT32             a8,
   LSA_UINT32             a9,
   LSA_UINT32             a10,
   LSA_UINT32             a11,
   LSA_UINT32             a12,
   LSA_UINT32             a13
   );
#endif

#ifndef PNTRC_TRACE_OUT_14
LSA_BOOL PNTRC_TRACE_OUT_14 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1,
   LSA_UINT32             a2,
   LSA_UINT32             a3,
   LSA_UINT32             a4,
   LSA_UINT32             a5,
   LSA_UINT32             a6,
   LSA_UINT32             a7,
   LSA_UINT32             a8,
   LSA_UINT32             a9,
   LSA_UINT32             a10,
   LSA_UINT32             a11,
   LSA_UINT32             a12,
   LSA_UINT32             a13,
   LSA_UINT32             a14
   );
#endif

#ifndef PNTRC_TRACE_OUT_15
LSA_BOOL PNTRC_TRACE_OUT_15 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1,
   LSA_UINT32             a2,
   LSA_UINT32             a3,
   LSA_UINT32             a4,
   LSA_UINT32             a5,
   LSA_UINT32             a6,
   LSA_UINT32             a7,
   LSA_UINT32             a8,
   LSA_UINT32             a9,
   LSA_UINT32             a10,
   LSA_UINT32             a11,
   LSA_UINT32             a12,
   LSA_UINT32             a13,
   LSA_UINT32             a14,
   LSA_UINT32             a15
   );
#endif

#ifndef PNTRC_TRACE_OUT_16
LSA_BOOL PNTRC_TRACE_OUT_16 (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1,
   LSA_UINT32             a2,
   LSA_UINT32             a3,
   LSA_UINT32             a4,
   LSA_UINT32             a5,
   LSA_UINT32             a6,
   LSA_UINT32             a7,
   LSA_UINT32             a8,
   LSA_UINT32             a9,
   LSA_UINT32             a10,
   LSA_UINT32             a11,
   LSA_UINT32             a12,
   LSA_UINT32             a13,
   LSA_UINT32             a14,
   LSA_UINT32             a15,
   LSA_UINT32             a16
   );
#endif

#ifndef PNTRC_TRACE_OUT_BYTE_ARRAY
LSA_BOOL PNTRC_TRACE_OUT_BYTE_ARRAY (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT8 *            DataPtr,
   LSA_UINT16             DataLen
   );
#endif

#ifndef PNTRC_TRACE_OUT_STRING
LSA_BOOL PNTRC_TRACE_OUT_STRING (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_CHAR *             St
   );
#endif

#ifndef PNTRC_TRACE_OUT_SYNC_TIME
LSA_BOOL PNTRC_TRACE_OUT_SYNC_TIME (
   LTRC_SUBSYS_TYPE       SubSys,
   PNTRC_LEVEL_TYPE       Level,
   LSA_UINT32             Idx,
#if (PNTRC_CFG_COMPILE_MODULE_ID == 1)
   LSA_UINT32             ModulId,
#endif
#if (PNTRC_CFG_COMPILE_FILE == 1)
   LSA_CHAR*              File,
#endif
#if (PNTRC_CFG_COMPILE_LINE == 1)
   LSA_UINT32             Line,
#endif
#if (PNTRC_CFG_COMPILE_TEXT == 1)
   LSA_CHAR*              Msg,
#endif
   LSA_UINT32             TracepointRef,
   LSA_UINT32             a1,
   LSA_UINT32             a2
   );
#endif

#ifdef __cplusplus  /* If C++ - compiler: End of C linkage */
}
#endif
/*****************************************************************************/
/*  Copyright (C) 2015 Siemens Aktiengesellschaft. All rights reserved.      */
/*****************************************************************************/
#endif  /* of PNTRC_SYS_H */
